id_cols     = c(new_id, hydroseq, comid, reachcode,
# group_list,
geometry),
names_from  = "position",
names_glue  = "{position}_{.value}",
values_from = c(length, comid_list, group)
# values_from = c(length, min_topo_sort, comid_list)
) %>%
dplyr::relocate(new_id, comid, reachcode, hydroseq, us_length, ds_length,
us_comid_list, ds_comid_list, us_group, ds_group,
# group_list,
geometry)
lhd_summary
# Join comids and create lists of COMIDs
lhd_summary <-
lhd_group %>%
sf::st_drop_geometry() %>%
dplyr::select(group, new_id, comid,
from, to, position, length,
min_topo_sort, hydroseq, reachcode) %>%
dplyr::group_by(comid, new_id, position) %>%
dplyr::left_join(
comid_group,
by = "group"
) %>%
dplyr::mutate(
comid_list    = c(comid_list)
) %>%
dplyr::ungroup()
lhd_summary$geometry <- st_geometry(lhd_group)
lhd_summary <-
lhd_summary %>%
dplyr::select(new_id, group, from, to, position,
length, min_topo_sort, hydroseq, comid, reachcode, comid_list,
# group_list,
geometry) %>%
dplyr::group_by(new_id) %>%
dplyr::arrange(length(comid_list), .by_group = T) %>%
dplyr::ungroup()
# wide comid dataframe
lhd_wide <-
lhd_summary %>%
tidyr::pivot_wider(
id_cols     = c(new_id, hydroseq, comid, reachcode,
# group_list,
geometry),
names_from  = "position",
names_glue  = "{position}_{.value}",
values_from = c(length, comid_list, group)
# values_from = c(length, min_topo_sort, comid_list)
) %>%
dplyr::relocate(new_id, comid, reachcode, hydroseq, us_length, ds_length,
us_comid_list, ds_comid_list, us_group, ds_group,
# group_list,
geometry)
View(lhd_wide)
source('C:/Users/angus/OneDrive/Desktop/github/lhd_analysis/utils/data_utils.R')
network_connectivity <- function(flines, points, return_wide = TRUE) {
# topo sort # for each comid --> LHD point
lhd_sort <-
flines %>%
# edges %>%
dplyr::filter(comid %in% points$comid) %>%
# dplyr::filter(comid %in% fline_nodes$comid) %>%
dplyr::select(comid, lhd_topo_sort = topo_sort, lhd_hydroseq = hydroseq) %>%
# dplyr::select(from, to, comid, group, lhd_topo_sort = topo_sort, lhd_hydroseq = hydroseq) %>%
dplyr::group_by(comid) %>%
dplyr::slice(1) %>%
dplyr::ungroup() %>%
sf::st_drop_geometry()
# Join comids and LHD ID to grouped line string
lhd_info <-
points %>%
dplyr::select(new_id, comid, reachcode,  geometry) %>%
dplyr::mutate(comid = as.integer(comid)) %>%
# dplyr::mutate(across(where(is.character), as.integer)) %>%
dplyr::mutate(
lng = sf::st_coordinates(.)[,1],
lat = sf::st_coordinates(.)[,2]
) %>%
sf::st_drop_geometry() %>%
dplyr::left_join(
lhd_sort,
by = "comid"
)
logger::log_info("Calculating segmented network lengths")
# edge_elev <-
#   edges %>%
#   group_by(group) %>%
#   fline_elevation()
# get total lengths of grouped line segments
group_sum <-
flines %>%
dplyr::group_by(group) %>%
dplyr::mutate(
min_topo_sort  = min(topo_sort)
) %>%
# ungroup() %>% arrange(min_topo_sort)  %>% group_by(group) %>%
dplyr::summarise(
from           = min(from),
to             = max(to),
min_topo_sort  = mean(min_topo_sort, na.rm = T)
) %>%
dplyr::select(geometry, from, to, min_topo_sort, group) %>%
dplyr::mutate(length = as.numeric(sf::st_length(.))) %>%
sf::st_sf() %>%
sf::st_cast("MULTILINESTRING") %>%
dplyr::mutate(
length = round(length, 2)
)
logger::log_info("Finding relative US/DS position of segmented network")
# match LHD points with upstream and downstream flowline groups
lhd_group <-
points %>%
sf::st_buffer(1) %>%
dplyr::select(new_id, comid, is_point, geometry) %>%
# dplyr::select(new_id, lhd_comid = comid, lhd_hydroseq = hydroseq, is_point, geometry) %>%
sf::st_filter(group_sum) %>%
sf::st_join(group_sum) %>%
sf::st_centroid()  %>%
dplyr::left_join(
dplyr::select(lhd_info, new_id, lhd_topo_sort, hydroseq = lhd_hydroseq, lng, lat, reachcode),
by = "new_id"
) %>%
# dplyr::left_join(dplyr::select(sf::st_drop_geometry(edge_elev), group, elevation),  by = "group") %>%
dplyr::relocate(comid, new_id, group, lhd_topo_sort,
from, to,
min_topo_sort,
hydroseq, length, is_point, lng, lat, reachcode, geometry) %>%
dplyr::group_by(new_id) %>%
dplyr::mutate(
npts        = dplyr::n(),
lag_from    = lag(from),
lag_to      = lag(to),
lead_from   = lead(from),
lead_to     = lead(to),
position    = dplyr::case_when(
to   == lead_from                   ~ "us",
from == lag_to                      ~ "ds",
min_topo_sort == max(min_topo_sort) ~ "us",
min_topo_sort == min(min_topo_sort) ~ "ds"
)
) %>%
dplyr::ungroup() %>%
dplyr::relocate(comid, new_id, npts, group,
from, to, lag_from, lag_to, lead_from, lead_to, position,length,
hydroseq, lhd_topo_sort, min_topo_sort,
is_point, lng, lat,reachcode, geometry) %>%
dplyr::select(-lag_from, -lag_to, -lead_from, -lead_to)
logger::log_info("Creating list of upstream and downstream COMIDs")
# list of comids per group
comid_group <-
flines %>%
sf::st_drop_geometry() %>%
dplyr::select(group, comid) %>%
dplyr::group_by(group) %>%
dplyr::summarise(comid_list = list(as.character(comid)))
# Join comids and create lists of COMIDs
lhd_summary <-
lhd_group %>%
sf::st_drop_geometry() %>%
dplyr::select(group, new_id, comid,
from, to, position, length,
min_topo_sort, hydroseq, reachcode) %>%
dplyr::group_by(comid, new_id, position) %>%
dplyr::left_join(
comid_group,
by = "group"
) %>%
dplyr::mutate(
comid_list    = c(comid_list)
) %>%
dplyr::ungroup()
# Nest groups as list
# nest_groups <-  lhd_summary %>%
#   dplyr::group_by(new_id) %>%  # dplyr::group_by(new_id, position) %>%
#   dplyr::summarise(group_list = list(as.character(group))) %>% dplyr::ungroup()
# Join nested groups list column with rest of summary data
# lhd_summary <- dplyr::left_join( lhd_summary,
# nest_groups,
# by = c("new_id"))
lhd_summary$geometry <- sf::st_geometry(lhd_group)
lhd_summary <-
lhd_summary %>%
dplyr::select(new_id, group, from, to, position,
length, min_topo_sort, hydroseq, comid, reachcode, comid_list,
# group_list,
geometry) %>%
dplyr::group_by(new_id) %>%
dplyr::arrange(length(comid_list), .by_group = T) %>%
dplyr::ungroup()
# %>%  dplyr::select(new_id, from, to, position,  length,
#         min_topo_sort, hydroseq, comid, reachcode, comid_list, group_list)
logger::log_info("Tidying final dataframe...")
# snake_net_name <- gsub(" ", "_", net_name)
if(return_wide == TRUE) {
logger::log_info("Returning wide dataframe...")
# wide comid dataframe
lhd_wide <-
lhd_summary %>%
tidyr::pivot_wider(
id_cols     = c(new_id, hydroseq, comid, reachcode,
# group_list,
geometry),
names_from  = "position",
names_glue  = "{position}_{.value}",
values_from = c(length, comid_list, group)
# values_from = c(length, min_topo_sort, comid_list)
) %>%
dplyr::relocate(new_id, comid, hydroseq, us_length, ds_length,
us_comid_list, ds_comid_list, us_group, ds_group, reachcode,
# group_list,
geometry)
return(lhd_wide)
} else if(return_wide == FALSE) {
logger::log_info("Returning long dataframe...")
return(lhd_summary)
# %>%  dplyr::mutate(
#     file_path     = huc_txt,
#     network_name  = snake_net_name) %>%
#   dplyr::relocate(
#     file_path, network_name, new_id, comid,  hydroseq, ds_length, us_length,
#     ds_min_topo_sort, us_min_topo_sort)
}
}
source('C:/Users/angus/OneDrive/Desktop/github/lhd_analysis/utils/data_utils.R')
# Calculate arbolate sum at each LHD site
rm(list = ls())
# Libaries
library(tidyverse)
library(sf)
library(dataRetrieval)
library(nhdplusTools)
library(mapview)
library(tidygraph)
library(sfnetworks)
library(nngeo)
# Source utility functions
source("utils/data_utils.R")
# Starting flowline for each HUC4
huc_starts <- readRDS("data/spatial/lines/start_lines.rds")
# LHD Points snapped to flowlines
# lhd_pts <- readRDS("data/spatial/points/lhd_flowline_connectivity.rds")  %>%
lhd_pts <- readRDS("data/spatial/points/lhd_flowline_points.rds") %>%
sf::st_transform(5070) %>%
dplyr::mutate(
huc4 = substr(REACHCODE, 1, 4)
) %>%
filter(!COMID %in% c(17876471, 17876487,  17900363, 17900361))
lhd_pts
# length(unique(lhd_pts$new_id))
# ids <- lhd_pts %>% distinct(new_id, .keep_all = F)
# lhd_pts %>% filter(new_id %in% ids$new_id)
# dup <- lhd_pts[duplicated(lhd_pts[,139]),]
# Path to clean directed stream networks
stream_network_path <- paste0(
"data/spatial/networks/trim/",
list.files("data/spatial/networks/trim/", pattern = "trim")
)
stream_network_path
i = 1
net_txt <- gsub("data/spatial/networks/trim/", "", stream_network_path[i])
ipct    <- paste0(round(100*(i/length(stream_network_path)), 2))
logger::log_info("{ipct} %")
logger::log_info("Calculating stream network connectivity\n File name: {net_txt}\n Full path: {stream_network_path[i]}")
ut_net <- readRDS(stream_network_path[i])
# plot(yampa_net2$geometry)
flines <- prep_flines(
flowlines = ut_net,
split     = FALSE
)
pts  <- prep_points(
flowlines = ut_net,
points    = lhd_pts,
wb        = TRUE
)
net    <- create_network(
flowlines = flines,
points    = pts
)
# Partition directed network edges between LHD points, waterbodies, and headwaters
group_net <-
net %>%
sfnetworks::activate("edges") %>%
dplyr::mutate(group = group_custom())
# Plot the results.
nodes        <-  sf::st_as_sf(group_net, "nodes")
edges        <-  sf::st_as_sf(group_net, "edges")
connect <- network_connectivity(
flines      = edges,
points      = pts,
return_wide = TRUE
# return_wide = FALSE
) %>%
mutate(network = net_txt)
connect
View(connect)
edge_final <-
edges %>%
mutate(network = net_txt)
edge_final
rm(list = ls())
# Libaries
library(tidyverse)
library(sf)
library(dataRetrieval)
library(nhdplusTools)
library(mapview)
library(tidygraph)
library(sfnetworks)
library(nngeo)
# Source utility functions
source("utils/data_utils.R")
# Starting flowline for each HUC4
huc_starts <- readRDS("data/spatial/lines/start_lines.rds")
# lhd_pts <- readRDS("data/spatial/points/lhd_flowline_connectivity.rds")  %>%
lhd_pts <- readRDS("data/spatial/points/lhd_flowline_points.rds") %>%
sf::st_transform(5070) %>%
dplyr::mutate(
huc4 = substr(REACHCODE, 1, 4)
) %>%
filter(!COMID %in% c(17876471, 17876487,  17900363, 17900361))
# length(unique(lhd_pts$new_id))
# ids <- lhd_pts %>% distinct(new_id, .keep_all = F)
# lhd_pts %>% filter(new_id %in% ids$new_id)
# dup <- lhd_pts[duplicated(lhd_pts[,139]),]
# Path to clean directed stream networks
stream_network_path <- paste0(
"data/spatial/networks/trim/",
list.files("data/spatial/networks/trim/", pattern = "trim")
)
stream_network_path
connect_lst <- list()
edge_lst <- list()
for (i in 1:length(stream_network_path)) {
net_txt <- gsub("data/spatial/networks/trim/", "", stream_network_path[i])
ipct    <- paste0(round(100*(i/length(stream_network_path)), 2))
logger::log_info("{ipct} %")
logger::log_info("Calculating stream network connectivity\n File name: {net_txt}\n Full path: {stream_network_path[i]}")
ut_net <- readRDS(stream_network_path[i])
# plot(yampa_net2$geometry)
flines <- prep_flines(
flowlines = ut_net,
split     = FALSE
)
pts  <- prep_points(
flowlines = ut_net,
points    = lhd_pts,
wb        = TRUE
)
# tmp <- flines %>% filter(topo_sort == 1)
# ggplot() +
#   geom_sf(data = flines, aes(color =topo_sort)) +
#   geom_sf(data = tmp, color = "red")
# mapview(tmp, color = "red") + flines
net    <- create_network(
flowlines = flines,
points    = pts
)
# Partition directed network edges between LHD points, waterbodies, and headwaters
group_net <-
net %>%
sfnetworks::activate("edges") %>%
dplyr::mutate(group = group_custom())
# Plot the results.
nodes        <-  sf::st_as_sf(group_net, "nodes")
edges        <-  sf::st_as_sf(group_net, "edges")
connect <- network_connectivity(
flines      = edges,
points      = pts,
return_wide = FALSE
) %>%
mutate(network = net_txt)
logger::log_info("Connectivity analysis complete: \n{net_txt}")
edge_final <-
edges %>%
mutate(network = net_txt)
connect_lst[[i]] <- connect
edge_lst[[i]]    <- edge_final
}
connect_df <- bind_rows(connect_lst)
View(connect_df)
connect_df <- bind_rows(connect_lst)
saveRDS(connect_df, "data/spatial/networks/connectivity/network_connectivity.rds")
edge_df <- bind_rows(edge_lst)
connect_df <- bind_rows(connect_lst)
edge_df    <- bind_rows(edge_lst)
saveRDS(connect_df, "data/spatial/networks/connectivity/network_connectivity.rds")
saveRDS(edge_df, "data/spatial/networks/connectivity/network_connectivity_flowlines.rds")
connect_df %>%
group_by(new_id) %>%
filter(!grepl("waterbody_", new_id))
lhd_connect <-
connect_df %>%
group_by(new_id) %>%
filter(!grepl("waterbody_", new_id)) %>%
mutate(cnt = n())
View(lhd_connect)
connect_df %>%
group_by(new_id) %>%
filter(!grepl("waterbody_", new_id)) %>%
mutate(cnt = n()) %>%
filter(!group %in% c(873) & !new_id %in% c(796, 795))
lhd_connect <-
connect_df %>%
group_by(new_id) %>%
filter(!grepl("waterbody_", new_id)) %>%
mutate(cnt = n()) %>%
filter(group %in% c(873) & new_id %in% c(796, 795))
lhd_connect <-
connect_df %>%
group_by(new_id) %>%
filter(!grepl("waterbody_", new_id)) %>%
mutate(cnt = n()) %>%
filter(!group %in% c(873) & !new_id %in% c(796, 795))
saveRDS(lhd_connect, "data/spatial/networks/connectivity/lhd_network_connectivity.rds")
# wide comid dataframe
lhd_wide <-
lhd_connect %>%
tidyr::pivot_wider(
id_cols     = c(new_id, hydroseq, comid, reachcode,
# group_list,
geometry),
names_from  = "position",
names_glue  = "{position}_{.value}",
values_from = c(length, comid_list, group)
# values_from = c(length, min_topo_sort, comid_list)
) %>%
dplyr::relocate(new_id, comid, hydroseq, us_length, ds_length,
us_comid_list, ds_comid_list, us_group, ds_group, reachcode,
# group_list,
geometry)
lhd_wide
View(lhd_wide)
saveRDS(lhd_wide, "data/spatial/networks/connectivity/lhd_network_connectivity.rds")
# LHD Points snapped to flowlines
lhd_pts <- readRDS("data/spatial/points/lhd_flowline_points.rds") %>%
sf::st_transform(5070) %>%
dplyr::mutate(
huc4 = substr(REACHCODE, 1, 4)
)
# Angus Watters
# Retrieve HUC4 stream networks and prep/trim/clean to use as directed graphs
rm(list = ls())
# Libaries
library(tidyverse)
library(sf)
library(dataRetrieval)
library(nhdplusTools)
library(mapview)
library(tidygraph)
library(sfnetworks)
library(nngeo)
# Source utility functions
source("utils/data_utils.R")
# LHD Points snapped to flowlines
lhd_pts <- readRDS("data/spatial/points/lhd_flowline_points.rds") %>%
sf::st_transform(5070) %>%
dplyr::mutate(
huc4 = substr(REACHCODE, 1, 4)
)
# HUC4 shape
huc_shp    <- readRDS("data/spatial/shp/huc4.rds") %>%
dplyr::filter(huc4 %in% unique(lhd_pts$huc4))
# Starting flowline for each HUC4
huc_starts <- readRDS("data/spatial/lines/start_lines.rds")
# find individual HUC8 for Animas River
yampa_lhd <-
lhd_pts %>%
dplyr::filter(huc4 == 1405) %>%
dplyr::mutate(
huc8= substr(REACHCODE, 1, 8)
)
# HUC 8 shapes
yampa_huc8 <- nhdplusTools::get_huc8(
AOI = dplyr::filter(huc_shp, huc4 == 1405)
) %>%
dplyr::filter(huc8 %in% c(14050007, 14050005, 14050002, 14050001))  %>%
dplyr::mutate(
huc_group = dplyr::case_when(
huc8 %in% c(14050002, 14050001) ~ "1",
huc8 %in% c(14050007, 14050005) ~ "2"
)
)
# merge 2 main HUC8s
yampa_huc_groups <-
yampa_huc8 %>%
group_by(huc_group) %>%
summarize()
# Full Yampa NHDplus dataset
nhdplus <- sf::read_sf(nhdplus_path) %>%
sf::st_transform(5070) %>%
dplyr::mutate(
huc4 = substr(REACHCODE, 1, 4),
huc8 = substr(REACHCODE, 1, 8)
)
# path to Yampa NHDplus dataset
nhdplus_path <- "C:/Users/angus/OneDrive/Desktop/nhdplus_dir/subset/nhdplus_yampa_subset.gpkg"
# Full Yampa NHDplus dataset
nhdplus <- sf::read_sf(nhdplus_path) %>%
sf::st_transform(5070) %>%
dplyr::mutate(
huc4 = substr(REACHCODE, 1, 4),
huc8 = substr(REACHCODE, 1, 8)
)
# Subset yampa network to just HUC8s of interest
yampa_networks <-
nhdplus %>%
dplyr::filter(huc8 %in% yampa_huc8$huc8)
# shapes to iterate over
unique_huc_groups <- unique(yampa_huc_groups$huc_group)
unique_huc_groups
