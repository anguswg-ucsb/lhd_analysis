source(find_google_drive.R)
source("find_google_drive.R")
source("misc/find_google_drive.R")
source("misc/find_google_drive.R")
# Import user table
users <- read.table("misc/find_google_drive_paths.txt",
sep = ",", header = T)
# Import user table
users <- read.table("lhd_analsis/misc/find_google_drive_paths.txt",
sep = ",", header = T)
# Import user table
users <- read.table("lhd_analsis/misc/find_google_drive_paths.txt",
sep = ",", header = T)
# Import user table
users <- read.table("misc/find_google_drive_paths.txt",
sep = ",", header = T)
# Import user table
users <- read.table("misc/find_google_drive_paths.txt",
sep = ",", header = T)
# Import user table
users <- read.table("misc/find_google_drive_paths.txt")
getwd()
# Import user table
users <- read.table("/misc/find_google_drive_paths.txt",
sep = ",", header = T)
# Import user table
users <- read.table("/misc/find_google_drive_paths.txt",
sep = ",", header = T)
# Import user table
users <- read.table("misc/find_google_drive_paths.txt",
sep = ",", header = T)
library(httr)
library(jsonlite)
source("misc/find_google_drive.R")
library(httr)
library(jsonlite)
source("misc/find_google_drive.R")
library(tidycensus)
install.packages("tidycensus")
install.packages(c(" tigris", "sf", "censusapi"))
# api
my_key <- "69c22a44cb77d733f583c3934266da10c914f128"
library(tidyverse)
library(tidycensus)
library(tigris)
library(sf)
library(censusapi)
## Review documentation---------------------------------------------------------
?get_decennial #1990, 2000, 2010 available, default is 2010
?get_acs # defaults: year: 2017 (endyear for 5-year ACS); survey: 5-year;
# moe_level: 90
?load_variables #dataset: One of "sf1", "sf3", "acs1", "acs3", "acs5",
## Load Variables---------------------------------------------------------------
# View all the avialable variables for 5-year ACS 2013-2017
v17 <- load_variables(year = 2017, dataset = "acs5", cache = TRUE)
View(v17)
# Load data profile variables only
v17_profile <- load_variables(2017, "acs5/profile", cache = TRUE)
View(v17_profile)
# Pull Decennial Census population counts by state
state_pop <- get_decennial(geography = "state",
variables = "P001001") # default is 2010
# Pull Decennial Census population counts by state
state_pop <- get_decennial(geography = "state",
variables = "P001001") # default is 2010
# when install = TRUE, you don't have to keep using this line in your scripts
census_api_key("69c22a44cb77d733f583c3934266da10c914f128", install = TRUE)
# Pull Decennial Census population counts by state
state_pop <- get_decennial(geography = "state",
variables = "P001001") # default is 2010
# when install = TRUE, you don't have to keep using this line in your scripts
census_api_key("69c22a44cb77d733f583c3934266da10c914f128", install = TRUE, overwrite = TRUE)
readRenviron("~/.Renviron")
# Pull Decennial Census population counts by state
state_pop <- get_decennial(geography = "state",
variables = "P001001") # default is 2010
library(tidyverse)
library(tidycensus)
library(tigris)
library(sf)
library(censusapi)
# Pull Decennial Census population counts by state
state_pop <- get_decennial(geography = "state",
variables = "P001001") # default is 2010
View(state_pop)
state_income <- get_acs(geography = "state",
variables = "P001001")
?get_acs
# Pull multiple counties to create the Cville MSA: Charlottesville, Albemarle,
# Fluvanna, Greene, Nelson
fp_msa_tract <- get_acs(geography = "tract",
variables = c(family_poverty = "B17010_002"),
state = "51",
county = c("540","003","065","079","125"), #concatenate county codes
geometry = T) # returns an sf tibble with simple feature geometry, useful for mapping later
View(fp_msa_tract)
# by block group
fp_cv_bg <- get_acs(geography = "block group", #geography is block group
variables = c(family_poverty = "B17010_002"),
state = "51",
county ="540")
View(fp_cv_bg)
# Load data profile variables only
v17_profile <- load_variables(2017, "acs5/profile", cache = TRUE)
View(v17_profile)
pop <- get_acs(geography = "block group",
variables = c(family_poverty = "B17010_002"),
state = "06")
View(pop)
pop <- get_acs(geography = "block group",
variables = c(family_poverty = "B17010_002"),
state = "07")
pop <- get_acs(geography = "block group",
variables = c(family_poverty = "B17010_002"),
state = "08")
pop <- get_decennial(geography = "block group",
variables = "P001001",
state = "08")
?get_decennial
pop <- get_decennial(geography = "block group",
variables = "P001001",
state = "08",
year = "2020")
rm(pop)
pop <- get_decennial(geography = "block group",
variables = "P001001",
state = "08",
year = "2020")
pop <- get_decennial(geography = "block group",
variables = "P001001",
state = "08")
View(pop)
pop <- get_decennial(geography = "block group",
table = "P001001",
state = "08")
## Review documentation---------------------------------------------------------
?get_decennial #1990, 2000, 2010 available, default is 2010
library(tigris)
pop <- get_decennial(geography = "block group",
variables = "P001001",
state = "08",
geometry = TRUE)
?load_variables
v17_profile <- load_variables(2020, "pl", cache = TRUE)
View(v17_profile)
?tidycensus
vars10 <- c("P005003", "P005004", "P005006", "P004003")
il <- get_decennial(geography = "county", variables = vars10, year = 2010,
summary_var = "P001001", state = "IL", geometry = TRUE) %>%
mutate(pct = 100 * (value / summary_value))
ggplot(il, aes(fill = pct, color = pct)) +
geom_sf() +
facet_wrap(~variable)
v17_profile <- load_variables(2010, "pl", cache = TRUE)
View(v17_profile)
v17_profile <- load_variables(2020, "pl", cache = TRUE)
pop2 <- get_decennial(geography = "block group",
variables = "P1_001N",
state = "08",
year = "2020"
geometry = TRUE)
pop2 <- get_decennial(geography = "block group",
variables = "P1_001N",
state = "08",
year = "2020",
geometry = TRUE)
View(pop2)
ggplot(pop2,aes(fill = value, color = value)) +
geom_sf()
pop2 %>%
filter(NAME %in% "El Paso") %>%
ggplot(pop2,aes(fill = value, color = value)) +
geom_sf()
pop2 %>%
filter(NAME %in% "El Paso") %>%
ggplot(aes(fill = value, color = value)) +
geom_sf()
pop2 %>%
filter(grepl('El Paso', NAME)) %>%
ggplot(aes(fill = value, color = value)) +
geom_sf()
pop2 %>%
filter(grepl('Gunnison', NAME)) %>%
ggplot(aes(fill = value, color = value)) +
geom_sf()
?get_decennial
census_api_key("69c22a44cb77d733f583c3934266da10c914f128", install = TRUE)
source("utils/data_utils.R")
pop <- get_pop("block group", "P1_001N", "08", "2020")
tidy_pop <- pop %>%
janitor::clean_names()
View(tidy_pop)
tidy_pop$extraction <- sub('.*,\\s*','',name)
tidy_pop$extraction <- sub('.*,\\s*','',name)
mutate(county = stringr::str_extract(name, '(?<=,)[^,]+(?=,)'))
mutate(county = stringr::str_extract(tidy_pop$name, '(?<=,)[^,]+(?=,)'))
mutate(county = stringr::str_extract(pop$name, '(?<=,)[^,]+(?=,)'))
tidy_pop <- pop %>%
janitor::clean_names() %>%
mutate(county = stringr::str_extract(pop$name, '(?<=,)[^,]+(?=,)'))
tidy_pop$county <- stringr::str_extract(pop$NAME, '(?<=,)[^,]+(?=,)')
tidy_pop$county <- sapply(strsplit(pop$NAME, ',\\s*'), `[`, 3)
tidy_pop <- pop %>%
janitor::clean_names() %>%
mutate(sapply(strsplit(pop$NAME, ',\\s*'), `[`, 3))
tidy_pop <- pop %>%
janitor::clean_names() %>%
mutate(county = sapply(strsplit(pop$NAME, ',\\s*'), `[`, 3))
tidy_pop <- pop %>%
janitor::clean_names() %>%
mutate(county = sapply(strsplit(pop$NAME, ',\\s*'), `[`, 3),
population = value)
tidy_pop <- pop %>%
janitor::clean_names() %>%
mutate(county = sapply(strsplit(pop$NAME, ',\\s*'), `[`, 3),
block_group = sapply(strsplit(pop$NAME, ',\\s*'), `[`, 1),
census_tract = sapply(strsplit(pop$NAME, ',\\s*'), `[`, 2),
population = value)
tidy_pop <- pop %>%
janitor::clean_names() %>%
mutate(county = sapply(strsplit(pop$NAME, ',\\s*'), `[`, 3),
block_group = sapply(strsplit(pop$NAME, ',\\s*'), `[`, 1),
census_tract = sapply(strsplit(pop$NAME, ',\\s*'), `[`, 2),
population = value) %>%
select(county, block_group, census_tract, population, geoid, geometry)
pop <- get_pop("block group", "P1_001N", "08", "2020")
View(pop)
get_pop <- function(geography, variables, state, year, geometry = TRUE) {
pop <- tidycensus::get_decennial(geography = geography,
variables = variables,
state = state,
year = year,
geometry = TRUE)
tidy_pop <- pop %>%
janitor::clean_names() %>%
mutate(county = sapply(strsplit(pop$NAME, ',\\s*'), `[`, 3),
block_group = sapply(strsplit(pop$NAME, ',\\s*'), `[`, 1),
census_tract = sapply(strsplit(pop$NAME, ',\\s*'), `[`, 2),
population = value) %>%
select(county, block_group, census_tract, population, geoid, geometry)
}
pop <- get_pop("block group", "P1_001N", "08", "2020")
View(pop)
View(pop)
remove(list = ls())  # clear all workspace variables
library(tidycensus)
library(tidyverse)
library(tigris)
#utility functions
source("misc/find_google_drive.R")
source("utils/data_utils.R")
pop <- get_pop("block group", "P1_001N", "08", "2020")
View(pop)
#utility functions
source("misc/find_google_drive.R")
#utility functions
source("utils/find_google_drive.R")
#utility functions
source("utils/find_google_drive.R")
#utility functions
source("utils/find_google_drive.R")
#utility functions
source("utils/find_google_drive.R")
# read in LHD data
lhd <- read.csv(paste0(drive_dir, "/data/Low Head Dam Inventory Final CIM 092920 - Inventory.csv"))
# read in LHD data
lhd <- read.csv(paste0(drive_dir, "/data/Low Head Dam Inventory Final CIM 092920 - Inventory.csv"))
# read in LHD data
lhd <- read.csv(paste0(drive_dir, "data/Low Head Dam Inventory Final CIM 092920 - Inventory.csv"))
lhd <- read.csv("G:/My Drive/American_Whitewater_LHDP/data/lhds.csv")
# read in LHD data
lhd <- read.csv(paste0(drive_dir, "/data/lhds.csv"))
# read in LHD data
lhd <- read.csv(paste0(drive_dir, "\data\Low Head Dam Inventory Final CIM 092920 - Inventory.csv"))
#utility functions
source("utils/find_google_drive.R")
# read in LHD data
lhd <- read.csv(paste0(drive_dir, "/data/Low Head Dam Inventory Final CIM 092920 - Inventory.csv"))
