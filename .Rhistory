radius_0.5 = purrr::map_dbl(pop_interp, 'y')) %>%
select(-pop_interp)
class(pop_interp)
lhd_pop_interp <- st_join(lhd_pop_summary, pop_interp, by = c("uid"))
lhd_pop_interp <- merge(lhd_pop_summary, pop_interp)
View(lhd_pop_interp)
# interpolate normalized data
buffer_interp <- lhd_pop_summary %>%
st_drop_geometry() %>%
group_by(uid) %>%
summarise(buffer_interp = list(approx(total_pop_norm, buffer, xout = 0.5))) %>%
ungroup() %>%
mutate(p_prime = purrr::map_dbl(buffer_interp, 'x'),
radius_0.5 = purrr::map_dbl(buffer_interp, 'y')) %>%
select(-buffer_interp)
# join interp data with lhd_pop_summary data
lhd_pop_interp <- merge(lhd_pop_summary, buffer_interp)
View(buffer_interp)
View(lhd_pop_interp)
# interpolate to population
pop_interp <- lhd_pop_interp %>%
st_drop_geometry() %>%
group_by(uid) %>%
summarise(pop_interp = list(approx(buffer, total_pop, xout = radius_0.5))) %>%
ungroup() %>%
mutate(radius_0.5 = purrr::map_dbl(pop_interp, 'x'),
total_pop_0.5 = purrr::map_dbl(pop_interp, 'y')) %>%
select(-pop_interp)
pop_interp <- lhd_pop_interp %>%
st_drop_geometry() %>%
group_by(uid) %>%
summarise(pop_interp = list(approx(buffer, total_pop, xout = radius_0.5)))
View(pop_interp[[2]][[1]])
# interpolate to population
pop_interp <- lhd_pop_interp %>%
st_drop_geometry() %>%
group_by(uid) %>%
summarise(pop_interp = list(approx(buffer, total_pop, xout = radius_0.5))) %>%
ungroup() %>%
mutate(radius_0.5 = purrr::map_dbl(pop_interp, 'x')[1],
total_pop_0.5 = purrr::map_dbl(pop_interp, 'y')[1]) %>%
select(-pop_interp)
View(pop_interp[[2]][[1]])
View(lhd_pop_interp)
pop_interp <- lhd_pop_interp %>%
st_drop_geometry() %>%
group_by(uid) %>%
summarise(pop_interp = list(approx(buffer, total_pop, xout = radius_0.5)))
View(pop_interp[[2]][[1]])
pop_interp <- lhd_pop_interp %>%
st_drop_geometry() %>%
group_by(uid) %>%
summarise(pop_interp = approx(buffer, total_pop, xout = radius_0.5))
# interpolate to population
pop_interp <- lhd_pop_interp %>%
st_drop_geometry() %>%
group_by(uid) %>%
summarise(pop_interp = approx(buffer, total_pop, xout = radius_0.5)) %>%
ungroup() %>%
mutate(radius_0.5 = purrr::map_dbl(pop_interp, 'x'),
total_pop_0.5 = purrr::map_dbl(pop_interp, 'y')) %>%
select(-pop_interp)
pop_interp <- lhd_pop_interp %>%
st_drop_geometry() %>%
group_by(uid) %>%
summarise(pop_interp = list(approx(buffer, total_pop, xout = radius_0.5)))
View(pop_interp[[2]][[1]])
test <- sapply(pop_interp,"[[",1)
View(test)
pop_interp <- lhd_pop_interp %>%
st_drop_geometry() %>%
group_by(uid) %>%
summarise(pop_interp = list(approx(buffer, total_pop, xout = radius_0.5))) %>%
ungroup() %>%
mutate(radius_0.5 = pop_interp[[1]][1], total_pop_0.5 = pop_interp[[2]][1])
pop_interp <- lhd_pop_interp %>%
st_drop_geometry() %>%
group_by(uid) %>%
summarise(pop_interp = list(approx(buffer, total_pop, xout = radius_0.5)))
test <- unlist(pop_interp)
x <- 10:1
"["(x, 3)
test <- sapply(pop_interp, "[[",1)
View(test)
test <- sapply(pop_interp$pop_interp, "[[",1)
View(test)
test2 <- sapply(pop_interp$pop_interp, function(x) x[1])
View(test2)
test2 <- sapply(pop_interp$pop_interp, "[[",2)
View(test2)
test <- sapply(pop_interp$pop_interp, "[[",1) %>%
filter(row_number ==1)
test <- sapply(pop_interp$pop_interp, "[[",1) %>%
as.data.frame() %>%
filter(row_number ==1)
test <- sapply(pop_interp$pop_interp, "[[",1) %>%
as.data.frame()
View(test)
test <- sapply(pop_interp$pop_interp, "[[",1) %>%
as.data.frame() %>%
filter(row_number ==1)
sapply(lst, `[`, n)
fun1 <- function(lst, n){
sapply(lst, `[`, n)
}
test2 <- fun1(pop_interp$pop_interp,1)
View(test2)
pop_interp <- lhd_pop_interp %>%
st_drop_geometry() %>%
group_by(uid) %>%
summarise(pop_interp = list(approx(buffer, total_pop, xout = radius_0.5))) %>%
select(-uid)
l <- list(c(1, 2), c(3, 4,5), c(5), c(6,7))
View(l)
test <- sapply(pop_interp$pop_interp, "[[",1) %>%
as.data.frame() %>%
filter(row_number ==1)
test <- sapply(pop_interp$pop_interp, "[[",1)
test2<- test1[1,]
test2<- test[1,]
pop_interp <- lhd_pop_interp %>%
st_drop_geometry() %>%
group_by(uid) %>%
summarise(pop_interp = list(approx(buffer, total_pop, xout = radius_0.5))) %>%
ungroup()
pop_interp <- lhd_pop_interp %>%
st_drop_geometry() %>%
group_by(uid) %>%
summarise(pop_interp = list(approx(buffer, total_pop, xout = radius_0.5))) %>%
ungroup() %>%
mutate(radius_0.5 = test2)
test3 <- sapply(pop_interp$pop_interp, "[[",1)
test4 <- test3[1,]
# interpolate to population
pop_interp <- lhd_pop_interp %>%
st_drop_geometry() %>%
group_by(uid) %>%
summarise(pop_interp = list(approx(buffer, total_pop, xout = radius_0.5))) %>%
ungroup() %>%
mutate(radius_0.5 = test2, total_pop_0.5 = test4)
test3 <- sapply(pop_interp$pop_interp, "[[",2)
test4 <- test3[1,]
pop_interp <- lhd_pop_interp %>%
st_drop_geometry() %>%
group_by(uid) %>%
summarise(pop_interp = list(approx(buffer, total_pop, xout = radius_0.5))) %>%
ungroup() %>%
mutate(radius_0.5 = test2, total_pop_0.5 = test4)
test <- sapply(pop_interp$pop_interp, "[[",1) %>% test[1,]
# interpolate to population
pop_interp <- lhd_pop_interp %>%
st_drop_geometry() %>%
group_by(uid) %>%
summarise(pop_interp = list(approx(buffer, total_pop, xout = radius_0.5))) %>%
ungroup() %>%
mutate(radius_0.5 = purrr::map_dbl(pop_interp, 'x'),
total_pop_0.5 = purrr::map_dbl(pop_interp, 'y')) %>%
select(-pop_interp)
# interpolate to population
pop_interp <- lhd_pop_interp %>%
st_drop_geometry() %>%
group_by(uid) %>%
summarise(pop_interp = list(approx(buffer, total_pop, xout = radius_0.5))) %>%
ungroup() %>%
mutate(radius_0.5 = purrr::map(pop_interp, 'x'),
total_pop_0.5 = purrr::map(pop_interp, 'y')) %>%
select(-pop_interp)
# interpolate to population
pop_interp <- lhd_pop_interp %>%
st_drop_geometry() %>%
group_by(uid) %>%
summarise(pop_interp = list(approx(buffer, total_pop, xout = radius_0.5))) %>%
ungroup() %>%
mutate(radius_0.5 = purrr::map(pop_interp, 'x')[1],
total_pop_0.5 = purrr::map(pop_interp, 'y')[1]) %>%
select(-pop_interp)
# interpolate to population
pop_interp <- lhd_pop_interp %>%
st_drop_geometry() %>%
group_by(uid) %>%
summarise(pop_interp = list(approx(buffer, total_pop, xout = radius_0.5))) %>%
ungroup() %>%
mutate(radius_0.5 = purrr::map(pop_interp, 'x')[[1]],
total_pop_0.5 = purrr::map(pop_interp, 'y')[[1]]) %>%
select(-pop_interp)
test2[2]
# interpolate to population
pop_interp <- lhd_pop_interp %>%
st_drop_geometry() %>%
group_by(uid) %>%
summarise(pop_interp = list(approx(buffer, total_pop, xout = radius_0.5))) %>%
ungroup() %>%
mutate(radius_0.5 = purrr::map(pop_interp, 'x'),
total_pop_0.5 = purrr::map(pop_interp, 'y'),
radius_0.5 = radius_0.5[1]) %>%
select(-pop_interp)
pop_interp$radius_0.5
pop_interp$radius_0.5[1]
pop_interp$radius_0.5[[1][]
pop_interp$radius_0.5[[1]]
pop_interp$radius_0.5[1][[1]]
test4 <- pop_interp$radius_0.5[1]
View(test4)
sapply(test4,"[[",1)
# interpolate to population
pop_interp <- lhd_pop_interp %>%
st_drop_geometry() %>%
group_by(uid) %>%
summarise(pop_interp = list(approx(buffer, total_pop, xout = radius_0.5))) %>%
ungroup() %>%
mutate(radius_0.5 = purrr::map(pop_interp, 'x'),
total_pop_0.5 = purrr::map(pop_interp, 'y'),
radius_0.5 = sapply(radius_0.5,"[[",1)) %>%
select(-pop_interp)
# interpolate to population
pop_interp <- lhd_pop_interp %>%
st_drop_geometry() %>%
group_by(uid) %>%
summarise(pop_interp = list(approx(buffer, total_pop, xout = radius_0.5))) %>%
ungroup() %>%
mutate(radius_0.5 = purrr::map(pop_interp, 'x'),
total_pop_0.5 = purrr::map(pop_interp, 'y'),
radius_0.5 = sapply(radius_0.5,"[[",1),
total_pop_0.5 = sapply(total_pop_0.5,"[[",1)) %>%
select(-pop_interp)
View(buffer_interp)
# join pop_interp with lhd_pop_summary data
lhd_pop_interp <- merge(lhd_pop_interp, pop_interp)
# join interp data with lhd_pop_summary data
lhd_pop_interp <- merge(lhd_pop_summary, buffer_interp)
group_by(uid) %>%
summarise(wpop = radius_0.5*buffer)
group_by(as.factor(uid)) %>%
summarise(wpop = radius_0.5*buffer)
weighted_pop <- lhd_pop_interp %>%
filter(buffer == 50) %>%
summarise(wpop = radius_0.5*buffer)
View(weighted_pop)
weighted_pop <- lhd_pop_interp %>%
filter(buffer == 50) %>%
group_by(uid, buffer) %>%
summarise(wpop = radius_0.5*buffer)
23.947*3779936
weighted_pop <- lhd_pop_interp %>%
filter(buffer == 50) %>%
group_by(uid) %>%
summarise(wpop = radius_0.5*buffer)
weighted_pop <- lhd_pop_interp %>%
filter(buffer == 50) %>%
summarise(wpop = radius_0.5*buffer,
uid = uid, total_pop = total_pop)
12.94*3779936
weighted_pop <- lhd_pop_interp %>%
filter(buffer == 50) %>%
summarise(wpop = radius_0.5*buffer,
uid = uid, total_pop = total_pop, radius_0.5 = radius_0.5)
weighted_pop <- lhd_pop_interp %>%
filter(buffer == 50)
weighted_pop <- lhd_pop_interp %>%
st_drop_geometry() %>%
filter(buffer == 50) %>%
summarise(wpop = radius_0.5*buffer,
uid = uid, total_pop = total_pop, radius_0.5 = radius_0.5)
ggplot(weighted_pop) %>%
geom_hist(aes(x = wpop))
ggplot(weighted_pop) %>%
geom_histogram(aes(x = wpop))
ggplot(weighted_pop) +
geom_histogram(aes(x = wpop))
weighted_pop <- lhd_pop_interp %>%
st_drop_geometry() %>%
filter(buffer == 50) %>%
summarise(wpop = radius_0.5*total_pop,
uid = uid, total_pop = total_pop, radius_0.5 = radius_0.5)
weighted_pop <- lhd_pop_interp %>%
st_drop_geometry() %>%
filter(buffer == 50) %>%
summarise(uid = uid, total_pop = total_pop,
radius_0.5 = radius_0.5, wpop = radius_0.5*total_pop)
ggplot(weighted_pop) +
geom_histogram(aes(x = wpop))
weighted_pop <- lhd_pop_interp %>%
st_drop_geometry() %>%
filter(buffer == 50) %>%
summarise(uid = uid, total_pop = total_pop,
radius_0.5 = radius_0.5, wpop = radius_0.5/50*total_pop)
ggplot(weighted_pop) +
geom_histogram(aes(x = wpop))
weighted_pop <- lhd_pop_interp %>%
st_drop_geometry() %>%
filter(buffer == 50) %>%
summarise(uid = uid, total_pop = total_pop,
radius_0.5 = radius_0.5, wpop = radius_0.5*total_pop)
ggplot(weighted_pop) +
geom_histogram(aes(x = wpop))
ggplot(weighted_pop) +
geom_histogram(aes(x = wpop), binwith = 2)
ggplot(weighted_pop) +
geom_histogram(aes(x = wpop), binwith = 10)
ggplot(weighted_pop) +
geom_histogram(aes(x = wpop), binwidth = 10)
ggplot(weighted_pop) +
geom_histogram(aes(x = wpop), binwidth = 50)
ggplot(weighted_pop) +
geom_histogram(aes(x = wpop), binwidth = 1000)
ggplot(weighted_pop) +
geom_histogram(aes(x = wpop), binwidth = 100000)
ggplot(weighted_pop) +
geom_histogram(aes(x = wpop), binwidth = 1000000)
# visualize normalized population increase for each lhd buffer
ggplotly(ggplot(lhd_pop_summary) +
geom_line(mapping = aes(x = buffer, y = total_pop_norm, group = factor(uid), col = uid),
color = "grey", size = 0.3) + #switch to y = total_pop to see non-normalized
geom_line(subset(lhd_pop_summary, uid %in% c("343")),
mapping = aes(x = buffer, y = total_pop_norm, group = factor(uid), col = uid),
color = "pink", size = 0.6) +
labs(x = "Buffer radius (mi)", y = "Total Population Normalized"))
# visualize normalized population increase for each lhd buffer
ggplotly(ggplot(lhd_pop_summary) +
geom_line(mapping = aes(x = buffer, y = total_pop, group = factor(uid), col = uid),
color = "grey", size = 0.3) + #switch to y = total_pop to see non-normalized
geom_line(subset(lhd_pop_summary, uid %in% c("343")),
mapping = aes(x = buffer, y = total_pop, group = factor(uid), col = uid),
color = "pink", size = 0.6) +
labs(x = "Buffer radius (mi)", y = "Total Population Normalized"))
ggplot(weighted_pop) +
geom_histogram(aes(x = wpop), binwidth = 1000000)
#weight radius at p'0.5 and then multiply by total pop
weighted_pop <- lhd_pop_interp %>%
st_drop_geometry() %>%
filter(buffer == 50) %>%
summarise(uid = uid, total_pop = total_pop,
radius_0.5 = radius_0.5, wpop = radius_0.5*total_pop/2)
ggplot(weighted_pop) +
geom_histogram(aes(x = wpop), binwidth = 1000000)
ggplot(weighted_pop) +
geom_histogram(aes(x = log(wpop)), binwidth = 1000000)
ggplot(weighted_pop) +
geom_histogram(aes(x = log10(wpop)), binwidth = 1000000)
ggplot(weighted_pop) +
geom_histogram(aes(x = log10(wpop)))
ggplot(weighted_pop) +
geom_histogram(aes(x = wpop))
ggplot(weighted_pop) +
geom_histogram(aes(x = wpop), binwidth = 100000)
ggplot(weighted_pop) +
geom_histogram(aes(x = wpop), binwidth = 10000)
ggplot(weighted_pop) +
geom_histogram(aes(x = wpop), binwidth = 1000)
ggplot(weighted_pop) +
geom_histogram(aes(x = wpop), binwidth = 1000000)
#plot to visualize
#all census blocks
ggplot(pop_mi, aes(fill = population, color = population)) +
geom_sf()
# all lhds
ggplot(lhd_mi, aes(color = structure_category)) +
geom_sf()
lhd_stream_order <- readRDS("C:/Users/RachelBash/Downloads/lhd_stream_order.rds")
View(lhd_stream_order)
ggplot(weighted_pop) +
geom_histogram(aes(x = wpop), binwidth = 1000000)
pop <- tidycensus::get_decennial(geography = "block group",
variables = "P1_001N",
state = "08",
year = "2020",
geometry = TRUE)
tidy_pop <- pop %>%
janitor::clean_names() %>%
mutate(county = sapply(strsplit(pop$name, ',\\s*'), `[`, 3),
block_group = sapply(strsplit(pop$name, ',\\s*'), `[`, 1),
census_tract = sapply(strsplit(pop$name, ',\\s*'), `[`, 2),
state = sapply(strsplit(pop$name, ',\\s*'), `[`, 4),
population = value) %>%
select(state, county, block_group, census_tract, population, geoid, geometry)
View(pop)
tidy_pop <- pop %>%
janitor::clean_names()
tidy_pop <- pop %>%
janitor::clean_names() %>%
mutate(county = sapply(strsplit(pop$name, ',\\s*'), `[`, 3),
block_group = sapply(strsplit(pop$name, ',\\s*'), `[`, 1),
census_tract = sapply(strsplit(pop$name, ',\\s*'), `[`, 2),
state = sapply(strsplit(pop$name, ',\\s*'), `[`, 4),
population = value)
tidy_pop <- pop %>%
janitor::clean_names() %>%
mutate(county = sapply(strsplit(pop$NAME, ',\\s*'), `[`, 3),
block_group = sapply(strsplit(pop$name, ',\\s*'), `[`, 1),
census_tract = sapply(strsplit(pop$name, ',\\s*'), `[`, 2),
state = sapply(strsplit(pop$name, ',\\s*'), `[`, 4),
population = value) %>%
select(state, county, block_group, census_tract, population, geoid, geometry)
tidy_pop <- pop %>%
janitor::clean_names() %>%
mutate(county = sapply(strsplit(pop$NAME, ',\\s*'), `[`, 3),
block_group = sapply(strsplit(pop$NAME, ',\\s*'), `[`, 1),
census_tract = sapply(strsplit(pop$NAME, ',\\s*'), `[`, 2),
state = sapply(strsplit(pop$NAME, ',\\s*'), `[`, 4),
population = value) %>%
select(state, county, block_group, census_tract, population, geoid, geometry)
#plot histogram showing weighted pop distribution
ggplot(weighted_pop) +
geom_histogram(aes(x = wpop), binwidth = 1000000) +
labs(x = "Weighted pop = Total pop x radius at 0.5 pop", y = "# LHDs")
weighted_pop_sum <- weighted_pop %>%
summarise(percentiles = quantile(wpop, probs = seq(0.1,0.9, by = 0.1)))
View(weighted_pop_sum)
# summary weighted pop
weighted_pop_sum <- weighted_pop %>%
mutate(PCT = ntile(wpop,10))
# summary weighted pop
weighted_pop_sum <- weighted_pop %>%
mutate(pct = ntile(wpop,10), pct = paste0(pct,"0 %"))
# summary weighted pop
weighted_pop_sum <- weighted_pop %>%
mutate(pct = ntile(wpop,10), pct = paste0(pct,"0%"))
# summary weighted pop
weighted_pop_sum <- weighted_pop %>%
mutate(pct = ntile(wpop,10), pct = paste0(pct,"0%")) %>%
group_by(pct) %>%
summarise(pop_pct = quantile(wpop, probs = seq(0.1,0.9, by = 0.1)),
tot_lhd = count(uid))
# summary weighted pop
weighted_pop_sum <- weighted_pop %>%
mutate(pct = ntile(wpop,10), pct = paste0(pct,"0%")) %>%
group_by(pct) %>%
summarise(pop_pct = quantile(wpop, probs = seq(0.1,0.9, by = 0.1)),
tot_lhd = n(uid))
# summary weighted pop
weighted_pop_sum <- weighted_pop %>%
mutate(pct = ntile(wpop,10), pct = paste0(pct,"0%")) %>%
group_by(pct) %>%
summarise(pop_pct = quantile(wpop, probs = seq(0.1,0.9, by = 0.1)),
tot_lhd = n())
# summary weighted pop
weighted_pop_sum <- weighted_pop %>%
summarise(pop_pct = quantile(wpop, probs = seq(0.1,0.9, by = 0.1)),
tot_lhd = n())
View(iris)
iris2 <- iris %>%
mutate(pct = ntile(wpop,10), pct = paste0(pct,"0%"))
iris2 <- iris %>%
mutate(pct = ntile(Sepal.Length,10), pct = paste0(pct,"0%"))
View(iris2)
iris2 <- iris %>%
mutate(pct = ntile(Sepal.Length,10), pct = paste0(pct,"0%")) %>%
group_by(pct) %>%
summarise(pct_pop = mean(Sepal.Length))
iris3 <- iris %>%
summarise(pop_pct = quantile(Sepal.Length, probs = seq(0.1,0.9, by = 0.1)))
View(iris3)
# summary weighted pop
weighted_pop_sum <- weighted_pop %>%
summarise(pop_pct = quantile(wpop, probs = seq(0.1,0.9, by = 0.1)),
tot_lhd = n())
# plot histogram showing weighted pop distribution
ggplot() +
geom_histogram(weighted_pop, aes(x = wpop), binwidth = 1000000) +
labs(x = "Weighted pop = Total pop x radius at 0.5 pop", y = "# LHDs") +
geom_point(weighted_pop_sum, aes(x = pop_pct))
# plot histogram showing weighted pop distribution
ggplot() +
geom_histogram(weighted_pop, aes(x = wpop), binwidth = 1000000) +
labs(x = "Weighted pop = Total pop x radius at 0.5 pop", y = "# LHDs") +
geom_point(weighted_pop_sum, mapping = aes(x = pop_pct))
# plot histogram showing weighted pop distribution
ggplot() +
geom_bar(weighted_pop, aes(x = wpop), binwidth = 1000000) +
labs(x = "Weighted pop = Total pop x radius at 0.5 pop", y = "# LHDs") +
geom_point(weighted_pop_sum, mapping = aes(x = pop_pct))
# plot histogram showing weighted pop distribution
ggplot() +
geom_bar(weighted_pop, aes(x = wpop), binwidth = 1000000) +
labs(x = "Weighted pop = Total pop x radius at 0.5 pop", y = "# LHDs")
# plot histogram showing weighted pop distribution
ggplot(weighted_pop) +
geom_bar(aes(x = wpop), binwidth = 1000000) +
labs(x = "Weighted pop = Total pop x radius at 0.5 pop", y = "# LHDs")
# plot histogram showing weighted pop distribution
ggplot(weighted_pop) +
geom_histogram(aes(x = wpop), binwidth = 1000000) +
labs(x = "Weighted pop = Total pop x radius at 0.5 pop", y = "# LHDs")
# plot histogram showing weighted pop distribution
ggplot(weighted_pop) +
geom_histogram(aes(x = wpop), binwidth = 1000000) +
labs(x = "Weighted pop = Total pop x radius at 0.5 pop", y = "# LHDs") +
xlim(0,7000000)
# plot histogram showing weighted pop distribution
ggplot(weighted_pop) +
geom_histogram(aes(x = wpop), binwidth = 1000000) +
labs(x = "Weighted pop = Total pop x radius at 0.5 pop", y = "# LHDs") +
xlim(0,70000000)
ggplot(weighted_pop_sum) +
geom_point(aes(x = pop_pct, y = tot_lhd)) +
xlim(0,70000000)
# summary weighted pop
weighted_pop_sum <- weighted_pop %>%
mutate(pct = ntile(wpop,10), pct = paste0(pct,"0%"))
View(weighted_pop_sum)
# summary weighted pop
weighted_pop_sum <- weighted_pop %>%
mutate(pct = ntile(wpop,10), pct = paste0(pct,"0%"),
rank = rank(wpop))
# summary weighted pop
weighted_pop_sum <- weighted_pop %>%
mutate(pct = ntile(wpop,10), pct = paste0(pct,"0%"),
rank = rank(-wpop))
test <- weighted_pop %>%
summarise(pop_pct = quantile(wpop, probs = seq(0.1,0.9, by = 0.1)),
tot_lhd = n())
View(test)
