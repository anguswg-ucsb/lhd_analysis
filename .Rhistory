gnis_name    = fline$gnis_name
)
# add comid to list
comid_lst[[i]] <- origin_df
fline_lst[[i]] <- fline
}
comid_df <- bind_rows(comid_lst)
fline_df <- bind_rows(fline_lst)
View(comid_df)
# comid_df %>% mutate(new_comid = ifelse())
comid_df %>%
mutate(
gnis_id2 = case_when(
gnis_id == " " ~  "temp_id",
TRUE           ~ gnis_id
),
gnis_name2 = case_when(
gnis_name == " " ~  "temp_name",
TRUE             ~ gnis_name
),
)
# comid_df %>% mutate(new_comid = ifelse())
comid_df <-
comid_df %>%
mutate(
gnis_id = case_when(
gnis_id == " " ~  "temp_id",
TRUE           ~ gnis_id
),
gnis_name = case_when(
gnis_name == " " ~  "temp_name",
TRUE             ~ gnis_name
),
)
View(comid_df)
start_comid <-
comid_df %>%
group_by(gnis_id) %>%
filter(hydroseq == min(hydroseq))
View(start_comid)
net_lst <- list()
for (i in 1:nrow(start_comid)) {
# i = 1
downstream_comid <- start_comid$origin_comid[i]
logger::log_info("Retrieving upstream mainstem network starting at:\nCOMID: {downstream_comid}")
um_net <- navigate_network(
start       = downstream_comid,
mode        = "UM",
distance_km = 400
) %>%
mutate(
check = ifelse(comid %in% comid_df$origin_comid | wbareacomi != 0, 1, 0)
)
# %>%   dplyr::select(comid, wbareacomi, lhd_check,  wb_check, check, hydroseq)
um_net_split <-
um_net %>%
arrange(hydroseq) %>%
group_split(cumsum(check == 1), keep = F)
um_net_split <-
um_net_split %>%
setNames(paste0("segment_", 1:length(um_net_split))) %>%
dplyr::bind_rows(.id = "segment_id")
net_lst[[i]] <- um_net_split
}
start_comid
mapview(net_lst[[1]]) + net_lst[[2]]
ggplot() +
geom_sf(data = tmp, aes(color = segment_id), size = 2) +
geom_sf(data = tmp2, aes(color = segment_id), size = 2) +
geom_sf(data = lhd_pt)
tmp <- net_lst[[1]]
tmp2 <- net_lst[[2]]
ggplot() +
geom_sf(data = tmp, aes(color = segment_id), size = 2) +
geom_sf(data = tmp2, aes(color = segment_id), size = 2) +
geom_sf(data = lhd_pt)
source(system.file("extdata", "sample_flines.R", package = "nhdplusTools"))
tocomid <- get_tocomid(sample_flines)
tocomid
tocomid <- get_tocomid(sample_flines, return_dendritic = FALSE)
tocomid
sample_flines
tocomid
networks <- bind_rows(net_lst)
unique(networks$gnis_id)
net_lst <- list()
for (i in 1:nrow(start_comid)) {
# i = 1
downstream_comid <- start_comid$origin_comid[i]
logger::log_info("Retrieving upstream mainstem network starting at:\nCOMID: {downstream_comid}")
um_net <- navigate_network(
start       = downstream_comid,
mode        = "UM",
distance_km = 400
) %>%
mutate(
check = ifelse(comid %in% comid_df$origin_comid | wbareacomi != 0, 1, 0)
)
# %>%   dplyr::select(comid, wbareacomi, lhd_check,  wb_check, check, hydroseq)
um_net_split <-
um_net %>%
arrange(hydroseq) %>%
group_split(cumsum(check == 1), keep = F)
um_net_split <-
um_net_split %>%
setNames(paste0("segment_", 1:length(um_net_split))) %>%
dplyr::bind_rows(.id = "segment_id") %>%
mutate(
gnis_id = case_when(
gnis_id == " "   ~  "temp_id",
TRUE             ~ gnis_id
),
gnis_name = case_when(
gnis_name == " " ~  "temp_name",
TRUE             ~ gnis_name
),
)
net_lst[[i]] <- um_net_split
}
networks <- bind_rows(net_lst)
unique(networks$gnis_id)
networks %>%
group_by(gnis_id) %>%
get_tocomid()
networks_tocomid <-
networks %>%
group_by(gnis_id) %>%
get_tocomid()
View(networks_tocomid)
# Convert LHD dataframe to spatial points  using sf package
lhd_pt <-
lhd %>%
sf::st_as_sf(
coords = c("longitude", "latitude"),
crs    = 4326
) %>%
sf::st_transform(5070) %>%
# filter(id %in% c(146)) %>%
# filter(id %in% c(836, 146)) %>%
rename(lhd_id = id) %>%
mutate(u_id = 1:n())  %>%
dplyr::relocate(u_id) %>%
slice(50:80)
fline_lst <- list()
comid_lst <- list()
for (i in 1:nrow(lhd_pt)) {
# i = 15
# LHD point
pt  <-
lhd_pt[i, ] %>%
st_transform(4326) %>%
st_coordinates()
# LHD id
u_id <- lhd_pt$u_id[i]
logger::log_info("Retrieving NHD COMID for LHD ID - {u_id}")
fline <- get_nhdplus(comid = findNLDI(location =   pt)$comid)
fline <-
fline %>%
nhdplusTools::align_nhdplus_names() %>%
# st_drop_geometry() %>%
mutate(
u_id         = u_id
)
# %>%
#   mutate(across(where(is.numeric), as.character))
# point comid
origin_df <- data.frame(
u_id         = u_id,
origin_comid = as.integer(findNLDI(location =   pt)$comid),
hydroseq     = fline$Hydroseq,
gnis_id      = fline$gnis_id,
gnis_name    = fline$gnis_name
)
# add comid to list
comid_lst[[i]] <- origin_df
fline_lst[[i]] <- fline
}
library(tidyverse)
library(sf)
library(dataRetrieval)
library(nhdplusTools)
library(mapview)
source("utils/utils.R")
lhd_path <- "data/lhd/Low Head Dam Inventory Final CIM 092920 - Inventory.csv"
# Read in LHD file
lhd <- readr::read_csv(lhd_path) %>%
janitor::clean_names()
# Convert LHD dataframe to spatial points  using sf package
lhd_pt <-
lhd %>%
sf::st_as_sf(
coords = c("longitude", "latitude"),
crs    = 4326
) %>%
sf::st_transform(5070) %>%
# filter(id %in% c(146)) %>%
# filter(id %in% c(836, 146)) %>%
rename(lhd_id = id) %>%
mutate(u_id = 1:n())  %>%
dplyr::relocate(u_id) %>%
slice(50:80)
fline_lst <- list()
comid_lst <- list()
for (i in 1:nrow(lhd_pt)) {
# i = 15
# LHD point
pt  <-
lhd_pt[i, ] %>%
st_transform(4326) %>%
st_coordinates()
# LHD id
u_id <- lhd_pt$u_id[i]
logger::log_info("Retrieving NHD COMID for LHD ID - {u_id}")
fline <- get_nhdplus(comid = findNLDI(location =   pt)$comid)
fline <-
fline %>%
nhdplusTools::align_nhdplus_names() %>%
# st_drop_geometry() %>%
mutate(
u_id         = u_id
)
# %>%
#   mutate(across(where(is.numeric), as.character))
# point comid
origin_df <- data.frame(
u_id         = u_id,
origin_comid = as.integer(findNLDI(location =   pt)$comid),
hydroseq     = fline$Hydroseq,
gnis_id      = fline$gnis_id,
gnis_name    = fline$gnis_name
)
# add comid to list
comid_lst[[i]] <- origin_df
fline_lst[[i]] <- fline
}
comid_df <- bind_rows(comid_lst)
fline_df <- bind_rows(fline_lst)
# comid_df %>% mutate(new_comid = ifelse())
comid_df <-
comid_df %>%
mutate(
gnis_id = case_when(
gnis_id == " "   ~  "temp_id",
TRUE             ~ gnis_id
),
gnis_name = case_when(
gnis_name == " " ~  "temp_name",
TRUE             ~ gnis_name
),
)
start_comid <-
comid_df %>%
group_by(gnis_id) %>%
filter(hydroseq == min(hydroseq))
start_comid
net_lst <- list()
start_comid$origin_comid[1]
for (i in 1:nrow(start_comid)) {
# i = 1
downstream_comid <- start_comid$origin_comid[i]
logger::log_info("Retrieving upstream mainstem network starting at:\nCOMID: {downstream_comid}")
um_net <- navigate_network(
start       = downstream_comid,
mode        = "UM",
distance_km = 400
) %>%
mutate(
check = ifelse(comid %in% comid_df$origin_comid | wbareacomi != 0, 1, 0)
)
# %>%   dplyr::select(comid, wbareacomi, lhd_check,  wb_check, check, hydroseq)
um_net_split <-
um_net %>%
arrange(hydroseq) %>%
group_split(cumsum(check == 1), keep = F)
um_net_split <-
um_net_split %>%
setNames(paste0("segment_", 1:length(um_net_split))) %>%
dplyr::bind_rows(.id = "segment_id") %>%
mutate(
gnis_id = case_when(
gnis_id == " "   ~  "temp_id",
TRUE             ~ gnis_id
),
gnis_name = case_when(
gnis_name == " " ~  "temp_name",
TRUE             ~ gnis_name
),
)
net_lst[[i]] <- um_net_split
}
networks <- bind_rows(net_lst)
tmp <- net_lst[[1]]
tmp2 <- net_lst[[2]]
ggplot() +
geom_sf(data = tmp, aes(color = segment_id), size = 2) +
geom_sf(data = tmp2, aes(color = segment_id), size = 2) +
geom_sf(data = lhd_pt)
# Convert LHD dataframe to spatial points  using sf package
lhd_pt <-
lhd %>%
sf::st_as_sf(
coords = c("longitude", "latitude"),
crs    = 4326
) %>%
sf::st_transform(5070) %>%
# filter(id %in% c(146)) %>%
# filter(id %in% c(836, 146)) %>%
rename(lhd_id = id) %>%
mutate(u_id = 1:n())  %>%
dplyr::relocate(u_id) %>%
slice(40:80)
mapview(lhd_pt)
fline_lst <- list()
comid_lst <- list()
for (i in 1:nrow(lhd_pt)) {
# i = 15
# LHD point
pt  <-
lhd_pt[i, ] %>%
st_transform(4326) %>%
st_coordinates()
# LHD id
u_id <- lhd_pt$u_id[i]
logger::log_info("Retrieving NHD COMID for LHD ID - {u_id}")
fline <- get_nhdplus(comid = findNLDI(location =   pt)$comid)
fline <-
fline %>%
nhdplusTools::align_nhdplus_names() %>%
# st_drop_geometry() %>%
mutate(
u_id         = u_id
)
# %>%
#   mutate(across(where(is.numeric), as.character))
# point comid
origin_df <- data.frame(
u_id         = u_id,
origin_comid = as.integer(findNLDI(location =   pt)$comid),
hydroseq     = fline$Hydroseq,
gnis_id      = fline$gnis_id,
gnis_name    = fline$gnis_name
)
# add comid to list
comid_lst[[i]] <- origin_df
fline_lst[[i]] <- fline
}
comid_df <- bind_rows(comid_lst)
fline_df <- bind_rows(fline_lst)
# comid_df %>% mutate(new_comid = ifelse())
comid_df <-
comid_df %>%
mutate(
gnis_id = case_when(
gnis_id == " "   ~  "temp_id",
TRUE             ~ gnis_id
),
gnis_name = case_when(
gnis_name == " " ~  "temp_name",
TRUE             ~ gnis_name
),
)
unique(comid_df$gnis_id)
net_lst <- list()
for (i in 1:nrow(start_comid)) {
# i = 1
downstream_comid <- start_comid$origin_comid[i]
logger::log_info("Retrieving upstream mainstem network starting at:\nCOMID: {downstream_comid}")
um_net <- navigate_network(
start       = downstream_comid,
mode        = "UM",
distance_km = 400
) %>%
mutate(
check = ifelse(comid %in% comid_df$origin_comid | wbareacomi != 0, 1, 0)
)
# %>%   dplyr::select(comid, wbareacomi, lhd_check,  wb_check, check, hydroseq)
um_net_split <-
um_net %>%
arrange(hydroseq) %>%
group_split(cumsum(check == 1), keep = F)
um_net_split <-
um_net_split %>%
setNames(paste0("segment_", 1:length(um_net_split))) %>%
dplyr::bind_rows(.id = "segment_id") %>%
mutate(
gnis_id = case_when(
gnis_id == " "   ~  "temp_id",
TRUE             ~ gnis_id
),
gnis_name = case_when(
gnis_name == " " ~  "temp_name",
TRUE             ~ gnis_name
),
)
net_lst[[i]] <- um_net_split
}
networks <- bind_rows(net_lst)
unique(networks$gnis_id)
networks
unique(networks$gnis_id)
start_comid
comid_df %>%
group_by(gnis_id)
start_comid <-
comid_df %>%
group_by(gnis_id) %>%
filter(hydroseq == min(hydroseq))
start_comid
net_lst <- list()
for (i in 1:nrow(start_comid)) {
# i = 1
downstream_comid <- start_comid$origin_comid[i]
logger::log_info("Retrieving upstream mainstem network starting at:\nCOMID: {downstream_comid}")
um_net <- navigate_network(
start       = downstream_comid,
mode        = "UM",
distance_km = 400
) %>%
mutate(
check = ifelse(comid %in% comid_df$origin_comid | wbareacomi != 0, 1, 0)
)
# %>%   dplyr::select(comid, wbareacomi, lhd_check,  wb_check, check, hydroseq)
um_net_split <-
um_net %>%
arrange(hydroseq) %>%
group_split(cumsum(check == 1), keep = F)
um_net_split <-
um_net_split %>%
setNames(paste0("segment_", 1:length(um_net_split))) %>%
dplyr::bind_rows(.id = "segment_id") %>%
mutate(
gnis_id = case_when(
gnis_id == " "   ~  "temp_id",
TRUE             ~ gnis_id
),
gnis_name = case_when(
gnis_name == " " ~  "temp_name",
TRUE             ~ gnis_name
),
)
net_lst[[i]] <- um_net_split
}
networks <- bind_rows(net_lst)
unique(networks$gnis_id)
networks_tocomid <-
networks %>%
group_by(gnis_id) %>%
get_tocomid()
net_lst
tmp <- net_lst[[1]]
tmp2 <- net_lst[[2]]
tmp3 <- net_lst[[3]]
ggplot() +
geom_sf(data = tmp, aes(color = segment_id), size = 2) +
geom_sf(data = tmp2, aes(color = segment_id), size = 2) +
geom_sf(data = tmp3, aes(color = segment_id), size = 2) +
geom_sf(data = lhd_pt)
flows <- readRDS("flow_bimonth_lag_timeseries.rds")
xgboost_model <- readRDS("boost_tree_dflow_flow_bimonth_reg_model.rds")
xgboost_model
xgboost_model$trained
xgboost_model$fit
rm(xgboost_model)
xgb_resamples <- readRDS("boost_tree_dflow_flow_bimonth_reg_resamples.rds")
xgb_resamples$.metrics
xgb_resamples$.predictions
xgb_resamples$.workflow
xgb_model     <- readRDS("boost_tree_dflow_flow_bimonth_reg_model.rds")
xgb_model$fit$fit
xgb_model$fit$fit$preproc
xgb_model$fit$fit$spec
xgb_resamples <- readRDS("boost_tree_dflow_flow_bimonth_reg_resamples.rds")
xgb_resamples$.workflow
xgb_resamples$.workflow$mold
xgb_resamples$.workflow$mold
xgb_resamples$.workflow[[1]]
xgb_resamples$.workflow[[2]]
xgb_resamples$.workflow[[1]]$post$actions
xgb_model$pre$mold$predictors
names(xgb_model$pre$mold$predictors)
test_flows <-
flows %>%
filter(site == "Pineview model")
library(tidyverse)
test_flows <-
flows %>%
filter(site == "Pineview model")
test_flows
test_flows <-
flows %>%
filter(site == "Pineview model") %>%
mutate(date_id = 1:n()) %>%
arrange(date_id) %>%
head()
test_flows <-
flows %>%
filter(site == "Pineview model") %>%
mutate(date_id = 1:n()) %>%
arrange(date_id)
test_flows <-
test_flows <-
flows %>%
filter(site == "Pineview model") %>%
mutate(date_id = 1:n()) %>%
arrange(date_id)
test_flows
test_flows <-
flows %>%
filter(site == "Pineview model") %>%
mutate(date_id = 1:n()) %>%
arrange(-date_id)
test_flows
